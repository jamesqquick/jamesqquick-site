---
export interface Props {
  text?: string;
  handler?: any;
  isLink?: boolean;
  href?: string;
  newTab?: boolean;
  classStr?: string;
  id?: string;
  download?: boolean;
  type?: ButtonType;
  hasOutline?: boolean;
}

export enum ButtonType {
  PRIMARY = "primary",
  SECONDARY = "secondary",
    TERTIARY = "tertiary",
}
const {
  text,
  handler,
  isLink = false,
  href = "/",
  newTab = false,
  classStr,
  id,
  download = false,
  type = ButtonType.SECONDARY,
  hasOutline = true,
} = Astro.props;

const colorClasses = {
  primary: "bg-brand border-brand text-bg text-bg hover:text-bg ",
  secondary:
    "text-white  border-white hover:text-brand hover:border-brand ",
    tertiary: "text-white border-white border-transparent hover:text-brand",
};
const classes = `text-center text-lg lg:text-xl rounded-full px-8 py-2 border inline-block transition flex gap-x-4 items-center justify-center ${
  classStr || ""
} ${colorClasses[type]}`;
---

{
  !isLink && (
    <button class={classes} onclick={handler} id={id || ""}>
      {text && text}
      <slot />
    </button>
  )
}
{
  isLink && download && (
    <a href={href} class={classes} download>
      {text && text}
      <slot />
    </a>
  )
}
{
  isLink && newTab && (
    <a
      href={href}
      class={classes}
      rel="noopener noreferrer"
      target="_blank"
      id={id || ""}
    >
      {text && text}
      <slot />
    </a>
  )
}

{
  isLink && !newTab && !download && (
    <a href={href} class={classes} id={id || ""}>
      {text && text}
      <slot />
    </a>
  )
}
